global
  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
#  log stdout format raw local0 info
  log 127.0.0.1:514 local0

defaults
  mode http
  timeout client 10s
  timeout connect 5s
  timeout server 10s
  timeout http-request 10s
  log global

frontend stats
  bind *:8404
  stats enable
  stats uri /
  stats refresh 10s

frontend fe
  bind *:80

  acl path_forum path_beg /api/forum
  acl path_chat path_beg /api/chat

  use_backend forum_microservice if path_forum
  use_backend chat_microservice if path_chat

  default_backend survivor_frontend


# frontend myapi
#   bind :80
#   # bind :443  ssl crt /etc/haproxy/certs/foo.com/cert.crt alpn h2
#   # http-request redirect scheme https unless { ssl_fc }

#   http-request deny content-type 'text/html' string 'Missing Authorization HTTP header' unless { req.hdr(authorization) -m found }

#   # get header part of the JWT
#   http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')

#   # get payload part of the JWT
#   # http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss')
#   # http-request set-var(txn.aud) http_auth_bearer,jwt_payload_query('$.aud')
#   http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')
#   # http-request set-var(txn.scope) http_auth_bearer,jwt_payload_query('$.scope')

#   # Validate the JWT
#   # http-request capture var(txn.alg) len 1000
#   http-request set-header X-test %[var(txn.alg)]
#   http-request set-header X-test1 %[var(txn.exp)]
#   http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm' unless { var(txn.alg) -m str HS256 }
#   # # http-request deny content-type 'text/html' string 'Invalid JWT issuer'  unless { var(txn.iss) -m str https://myaccount.auth0.com/ }
#   # # http-request deny content-type 'text/html' string 'Invalid JWT audience'  unless { var(txn.aud) -m str https://api.mywebsite.com }
#   http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless { http_auth_bearer,jwt_verify(txn.alg,"${JWT_SECRET}") -m int 1 }

#   # http-request set-var(txn.now) date()
#   http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp),sub(txn.now) -m int lt 0 }

#   # http-request deny if { path_beg /api/ } { method GET } ! { var(txn.scope) -m sub read }
#   # http-request deny if { path_beg /api/ } { method DELETE POST PUT } ! { var(txn.scope) -m sub write }

#   default_backend servers

backend forum_microservice
  mode http
  server s1 host.docker.internal:8000

backend chat_microservice
  mode http
  server s1 host.docker.internal:8001

backend survivor_frontend
  # mode http
  server nextjs host.docker.internal:3000

# backend servers
#   balance roundrobin
#   server s1 web1:8080 check maxconn 30
#   server s2 web2:8080 check maxconn 30
#   server s3 web3:8080 check maxconn 30
