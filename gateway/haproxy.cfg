global
  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
#  log stdout format raw local0 info
  log 127.0.0.1:514 local0

defaults
  mode http
  log global
  retries 3
  maxconn 2000
  timeout connect 5s
  timeout client 50s
  timeout server 50s

frontend stats
  bind *:8404
  stats enable
  stats uri /
  stats refresh 10s


frontend myapi
  bind :80

  acl forum        path_beg     /api/forum
  acl is_moderated path_beg     /api/moderators
  acl token_found req.cook(next-auth.session-token) -m found

  http-request deny content-type 'text/html' string 'Missing Nextauth session token' if is_moderated !token_found

  # get header part of the JWT
  http-request set-var(txn.alg) req.cook(next-auth.session-token),jwt_header_query('$.alg') if is_moderated

  # get payload part of the JWT
  http-request set-var(txn.exp) req.cook(next-auth.session-token),jwt_payload_query('$.exp','int') if is_moderated
  http-request set-var(txn.now) date() if is_moderated
  http-request deny content-type 'text/html' string 'JWT has expired' if is_moderated { var(txn.exp),sub(txn.now) -m int lt 0 }

  # Validate the JWT
  http-request set-header X-test %[var(txn.alg)]
  http-request set-header X-test1 %[var(txn.exp)]
  http-request set-header X-test2 %[req.cook(next-auth.session-token)]
  http-request set-header X-test3 %[http_auth_bearer]
  http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm' unless !is_moderated || { var(txn.alg) -m str HS256 }
  http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless !is_moderated || { req.cook(next-auth.session-token),jwt_verify(txn.alg,"${JWT_SECRET}") -m int 1 }

  acl moderators_resources  path_beg         /api/moderators/resources
  acl moderators_chat       path_beg         /api/moderators/chat

  use_backend moderatorsResources if moderators_resources
  use_backend moderatorsChat if moderators_chat
  use_backend forum_microservice if forum

backend forum_microservice
balance roundrobin
    server s1 web1:8080 check maxconn 30


backend moderatorsChat
  balance roundrobin
    server s1 web1:8080 check maxconn 30


backend moderatorsResources
http-request deny content-type 'text/html' string 'Missing Nextauth session token' unless { req.cook(next-auth.session-token) -m found }

  # get header part of the JWT
  http-request set-var(txn.alg) req.cook(next-auth.session-token),jwt_header_query('$.alg')

  # get payload part of the JWT
  http-request set-var(txn.exp) req.cook(next-auth.session-token),jwt_payload_query('$.exp','int')
  http-request set-var(txn.now) date()
  http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp),sub(txn.now) -m int lt 0 }

  # Validate the JWT
  http-request set-header X-test %[var(txn.alg)]
  http-request set-header X-test1 %[var(txn.exp)]
  http-request set-header X-test2 %[req.cook(next-auth.session-token)]
  http-request set-header X-test3 %[http_auth_bearer]
  http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm' unless { var(txn.alg) -m str HS256 }
  http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless { req.cook(next-auth.session-token),jwt_verify(txn.alg,"${JWT_SECRET}") -m int 1 }
 balance roundrobin
  server s1 web1:8080 check maxconn 30

