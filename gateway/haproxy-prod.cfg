global
  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
#  log stdout format raw local0 info
  log 127.0.0.1:514 local0

defaults
  mode http
  timeout client 10s
  timeout connect 5s
  timeout server 10s
  timeout http-request 10s
  log global

frontend stats
  bind *:8404
  stats enable
  stats uri /
  stats refresh 10s

frontend fe
  bind :80

  # https://serversforhackers.com/c/letsencrypt-with-haproxy
  bind :443 ssl crt /tls/haproxy.pem
  mode http

  acl letsencrypt  path_beg     /.well-known/acme-challenge/
  use_backend letsencrypt if letsencrypt

  acl forum        path_beg     /api/forum
  acl is_moderated path_beg     /api/moderators

  acl token_found  req.cook(next-auth.session-token) -m found

  http-request deny content-type 'text/html' string 'Missing Nextauth session token' if is_moderated !token_found

  # get header part of the JWT
  # http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')
  http-request set-var(txn.alg) req.cook(next-auth.session-token),jwt_header_query('$.alg') if is_moderated

  # get payload part of the JWT
  # http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss')
  # http-request set-var(txn.aud) http_auth_bearer,jwt_payload_query('$.aud')
  # http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')
  # http-request set-var(txn.scope) http_auth_bearer,jwt_payload_query('$.scope')
  http-request set-var(txn.exp) req.cook(next-auth.session-token),jwt_payload_query('$.exp','int') if is_moderated
  http-request set-var(txn.now) date() if is_moderated
  http-request deny content-type 'text/html' string 'JWT has expired' if is_moderated { var(txn.exp),sub(txn.now) -m int lt 0 }

  # Validate the JWT
  # http-request capture var(txn.alg) len 1000
  http-request set-header X-test %[var(txn.alg)]
  http-request set-header X-test1 %[var(txn.exp)]
  http-request set-header X-test2 %[req.cook(next-auth.session-token)]
  # http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm' unless !is_moderated || { var(txn.alg) -m str HS256 }
  # http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless !is_moderated || { req.cook(next-auth.session-token),jwt_verify(txn.alg,"${JWT_SECRET}") -m int 1 }

  acl path_forum                 path_beg   /api/forum
  acl path_chat                  path_beg   /api/chat
  acl path_resources             path_beg   /api/resources
  acl path_reports               path_beg   /api/reports
  acl path_moderators_reports    path_beg   /api/moderators/reports
  acl path_moderators_resources  path_beg   /api/moderators/resources
  acl path_moderators_chat       path_beg   /api/moderators/chat
  acl path_moderators_forum      path_beg   /api/moderators/forum
  acl azure_ad_auth              path_beg   /api/adauth

  use_backend chat_microservice         if path_chat
  use_backend chat_microservice         if path_moderators_chat

  use_backend forum_microservice        if path_forum
  use_backend forum_microservice        if path_moderators_forum

  use_backend reports_microservice      if path_reports
  use_backend reports_microservice      if path_moderators_reports

  use_backend resources_microservice    if path_resources
  use_backend resources_microservice    if path_moderators_resources

  use_backend auth_microservice         if azure_ad_auth

  default_backend survivor_frontend

backend chat_microservice
  timeout tunnel  1h # timeout to use with WebSocket and CONNECT
  server s1 host.docker.internal:8001 check maxconn 30

backend forum_microservice
  balance roundrobin
  http-request replace-path /api/forum/(.*) /\1
  http-request replace-path /api/moderators/forum/(.*) /moderator/\1
  server s1 host.docker.internal:8002 check maxconn 30

backend reports_microservice
  balance roundrobin
  http-request replace-path /api/moderators/(.*) /\1
  http-request replace-path /api/(.*) /\1
  server s1 host.docker.internal:8003 check maxconn 30

backend resources_microservice
  balance roundrobin
  # Strip the /api/resources/ or /api/moderators/resources/ from the URL
  # to pass into the microservice
  http-request replace-path /api/(moderators/)?resources(/)?(.*) /\3
  server s1 host.docker.internal:8004 check maxconn 30

backend survivor_frontend
  server nextjs host.docker.internal:8005

backend auth_microservice
  http-request replace-path /api/adauth/?(.*) /\1
  server s1 host.docker.internal:8006

backend letsencrypt
  server s1 host.docker.internal:8888
